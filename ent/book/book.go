// Code generated by ent, DO NOT EDIT.

package book

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserUUID holds the string denoting the user_uuid field in the database.
	FieldUserUUID = "user_uuid"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldPublisher holds the string denoting the publisher field in the database.
	FieldPublisher = "publisher"
	// FieldPublishingCompany holds the string denoting the publishing_company field in the database.
	FieldPublishingCompany = "publishing_company"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldTotalPage holds the string denoting the total_page field in the database.
	FieldTotalPage = "total_page"
	// FieldCurrentPage holds the string denoting the current_page field in the database.
	FieldCurrentPage = "current_page"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEditedAt holds the string denoting the edited_at field in the database.
	FieldEditedAt = "edited_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the book in the database.
	Table = "books"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "books"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_uuid"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldUserUUID,
	FieldTitle,
	FieldSubtitle,
	FieldPublisher,
	FieldPublishingCompany,
	FieldMemo,
	FieldTotalPage,
	FieldCurrentPage,
	FieldCreatedAt,
	FieldEditedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotalPage holds the default value on creation for the "total_page" field.
	DefaultTotalPage int
	// DefaultCurrentPage holds the default value on creation for the "current_page" field.
	DefaultCurrentPage int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Book queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserUUID orders the results by the user_uuid field.
func ByUserUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserUUID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubtitle orders the results by the subtitle field.
func BySubtitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtitle, opts...).ToFunc()
}

// ByPublisher orders the results by the publisher field.
func ByPublisher(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublisher, opts...).ToFunc()
}

// ByPublishingCompany orders the results by the publishing_company field.
func ByPublishingCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishingCompany, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByTotalPage orders the results by the total_page field.
func ByTotalPage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalPage, opts...).ToFunc()
}

// ByCurrentPage orders the results by the current_page field.
func ByCurrentPage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEditedAt orders the results by the edited_at field.
func ByEditedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEditedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
