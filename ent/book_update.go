// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dev-hyunsang/my-home-library-server/ent/book"
	"github.com/dev-hyunsang/my-home-library-server/ent/predicate"
	"github.com/dev-hyunsang/my-home-library-server/ent/user"
	"github.com/google/uuid"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUserUUID sets the "user_uuid" field.
func (bu *BookUpdate) SetUserUUID(u uuid.UUID) *BookUpdate {
	bu.mutation.SetUserUUID(u)
	return bu
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (bu *BookUpdate) SetNillableUserUUID(u *uuid.UUID) *BookUpdate {
	if u != nil {
		bu.SetUserUUID(*u)
	}
	return bu
}

// SetTitle sets the "title" field.
func (bu *BookUpdate) SetTitle(s string) *BookUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BookUpdate) SetNillableTitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetSubtitle sets the "subtitle" field.
func (bu *BookUpdate) SetSubtitle(s string) *BookUpdate {
	bu.mutation.SetSubtitle(s)
	return bu
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (bu *BookUpdate) SetNillableSubtitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetSubtitle(*s)
	}
	return bu
}

// SetPublisher sets the "publisher" field.
func (bu *BookUpdate) SetPublisher(s string) *BookUpdate {
	bu.mutation.SetPublisher(s)
	return bu
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublisher(s *string) *BookUpdate {
	if s != nil {
		bu.SetPublisher(*s)
	}
	return bu
}

// SetPublishingCompany sets the "publishing_company" field.
func (bu *BookUpdate) SetPublishingCompany(s string) *BookUpdate {
	bu.mutation.SetPublishingCompany(s)
	return bu
}

// SetNillablePublishingCompany sets the "publishing_company" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublishingCompany(s *string) *BookUpdate {
	if s != nil {
		bu.SetPublishingCompany(*s)
	}
	return bu
}

// SetMemo sets the "memo" field.
func (bu *BookUpdate) SetMemo(s string) *BookUpdate {
	bu.mutation.SetMemo(s)
	return bu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (bu *BookUpdate) SetNillableMemo(s *string) *BookUpdate {
	if s != nil {
		bu.SetMemo(*s)
	}
	return bu
}

// SetTotalPage sets the "total_page" field.
func (bu *BookUpdate) SetTotalPage(i int) *BookUpdate {
	bu.mutation.ResetTotalPage()
	bu.mutation.SetTotalPage(i)
	return bu
}

// SetNillableTotalPage sets the "total_page" field if the given value is not nil.
func (bu *BookUpdate) SetNillableTotalPage(i *int) *BookUpdate {
	if i != nil {
		bu.SetTotalPage(*i)
	}
	return bu
}

// AddTotalPage adds i to the "total_page" field.
func (bu *BookUpdate) AddTotalPage(i int) *BookUpdate {
	bu.mutation.AddTotalPage(i)
	return bu
}

// SetCurrentPage sets the "current_page" field.
func (bu *BookUpdate) SetCurrentPage(i int) *BookUpdate {
	bu.mutation.ResetCurrentPage()
	bu.mutation.SetCurrentPage(i)
	return bu
}

// SetNillableCurrentPage sets the "current_page" field if the given value is not nil.
func (bu *BookUpdate) SetNillableCurrentPage(i *int) *BookUpdate {
	if i != nil {
		bu.SetCurrentPage(*i)
	}
	return bu
}

// AddCurrentPage adds i to the "current_page" field.
func (bu *BookUpdate) AddCurrentPage(i int) *BookUpdate {
	bu.mutation.AddCurrentPage(i)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BookUpdate) SetCreatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BookUpdate) SetNillableCreatedAt(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetEditedAt sets the "edited_at" field.
func (bu *BookUpdate) SetEditedAt(t time.Time) *BookUpdate {
	bu.mutation.SetEditedAt(t)
	return bu
}

// SetNillableEditedAt sets the "edited_at" field if the given value is not nil.
func (bu *BookUpdate) SetNillableEditedAt(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetEditedAt(*t)
	}
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BookUpdate) SetUserID(id uuid.UUID) *BookUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BookUpdate) SetUser(u *User) *BookUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BookUpdate) ClearUser() *BookUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookUpdate) check() error {
	if _, ok := bu.mutation.UserID(); bu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Book.user"`)
	}
	return nil
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Subtitle(); ok {
		_spec.SetField(book.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
	}
	if value, ok := bu.mutation.PublishingCompany(); ok {
		_spec.SetField(book.FieldPublishingCompany, field.TypeString, value)
	}
	if value, ok := bu.mutation.Memo(); ok {
		_spec.SetField(book.FieldMemo, field.TypeString, value)
	}
	if value, ok := bu.mutation.TotalPage(); ok {
		_spec.SetField(book.FieldTotalPage, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedTotalPage(); ok {
		_spec.AddField(book.FieldTotalPage, field.TypeInt, value)
	}
	if value, ok := bu.mutation.CurrentPage(); ok {
		_spec.SetField(book.FieldCurrentPage, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedCurrentPage(); ok {
		_spec.AddField(book.FieldCurrentPage, field.TypeInt, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(book.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.EditedAt(); ok {
		_spec.SetField(book.FieldEditedAt, field.TypeTime, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetUserUUID sets the "user_uuid" field.
func (buo *BookUpdateOne) SetUserUUID(u uuid.UUID) *BookUpdateOne {
	buo.mutation.SetUserUUID(u)
	return buo
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableUserUUID(u *uuid.UUID) *BookUpdateOne {
	if u != nil {
		buo.SetUserUUID(*u)
	}
	return buo
}

// SetTitle sets the "title" field.
func (buo *BookUpdateOne) SetTitle(s string) *BookUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableTitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetSubtitle sets the "subtitle" field.
func (buo *BookUpdateOne) SetSubtitle(s string) *BookUpdateOne {
	buo.mutation.SetSubtitle(s)
	return buo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableSubtitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetSubtitle(*s)
	}
	return buo
}

// SetPublisher sets the "publisher" field.
func (buo *BookUpdateOne) SetPublisher(s string) *BookUpdateOne {
	buo.mutation.SetPublisher(s)
	return buo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublisher(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPublisher(*s)
	}
	return buo
}

// SetPublishingCompany sets the "publishing_company" field.
func (buo *BookUpdateOne) SetPublishingCompany(s string) *BookUpdateOne {
	buo.mutation.SetPublishingCompany(s)
	return buo
}

// SetNillablePublishingCompany sets the "publishing_company" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublishingCompany(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPublishingCompany(*s)
	}
	return buo
}

// SetMemo sets the "memo" field.
func (buo *BookUpdateOne) SetMemo(s string) *BookUpdateOne {
	buo.mutation.SetMemo(s)
	return buo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableMemo(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetMemo(*s)
	}
	return buo
}

// SetTotalPage sets the "total_page" field.
func (buo *BookUpdateOne) SetTotalPage(i int) *BookUpdateOne {
	buo.mutation.ResetTotalPage()
	buo.mutation.SetTotalPage(i)
	return buo
}

// SetNillableTotalPage sets the "total_page" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableTotalPage(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetTotalPage(*i)
	}
	return buo
}

// AddTotalPage adds i to the "total_page" field.
func (buo *BookUpdateOne) AddTotalPage(i int) *BookUpdateOne {
	buo.mutation.AddTotalPage(i)
	return buo
}

// SetCurrentPage sets the "current_page" field.
func (buo *BookUpdateOne) SetCurrentPage(i int) *BookUpdateOne {
	buo.mutation.ResetCurrentPage()
	buo.mutation.SetCurrentPage(i)
	return buo
}

// SetNillableCurrentPage sets the "current_page" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCurrentPage(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetCurrentPage(*i)
	}
	return buo
}

// AddCurrentPage adds i to the "current_page" field.
func (buo *BookUpdateOne) AddCurrentPage(i int) *BookUpdateOne {
	buo.mutation.AddCurrentPage(i)
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BookUpdateOne) SetCreatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCreatedAt(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetEditedAt sets the "edited_at" field.
func (buo *BookUpdateOne) SetEditedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetEditedAt(t)
	return buo
}

// SetNillableEditedAt sets the "edited_at" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableEditedAt(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetEditedAt(*t)
	}
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BookUpdateOne) SetUserID(id uuid.UUID) *BookUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BookUpdateOne) SetUser(u *User) *BookUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BookUpdateOne) ClearUser() *BookUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookUpdateOne) check() error {
	if _, ok := buo.mutation.UserID(); buo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Book.user"`)
	}
	return nil
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Subtitle(); ok {
		_spec.SetField(book.FieldSubtitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
	}
	if value, ok := buo.mutation.PublishingCompany(); ok {
		_spec.SetField(book.FieldPublishingCompany, field.TypeString, value)
	}
	if value, ok := buo.mutation.Memo(); ok {
		_spec.SetField(book.FieldMemo, field.TypeString, value)
	}
	if value, ok := buo.mutation.TotalPage(); ok {
		_spec.SetField(book.FieldTotalPage, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedTotalPage(); ok {
		_spec.AddField(book.FieldTotalPage, field.TypeInt, value)
	}
	if value, ok := buo.mutation.CurrentPage(); ok {
		_spec.SetField(book.FieldCurrentPage, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedCurrentPage(); ok {
		_spec.AddField(book.FieldCurrentPage, field.TypeInt, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(book.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.EditedAt(); ok {
		_spec.SetField(book.FieldEditedAt, field.TypeTime, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
